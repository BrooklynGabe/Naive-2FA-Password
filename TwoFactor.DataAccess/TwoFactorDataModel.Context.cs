//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TwoFactor.DataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TwoFactorContext : DbContext
    {
        public TwoFactorContext()
            : base("name=TwoFactorContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<OneTimeSecret> OneTimeSecrets { get; set; }
    
        public virtual int SetSecretForUser(string userLoginName, byte[] secret, Nullable<System.DateTime> validUntil)
        {
            var userLoginNameParameter = userLoginName != null ?
                new ObjectParameter("UserLoginName", userLoginName) :
                new ObjectParameter("UserLoginName", typeof(string));
    
            var secretParameter = secret != null ?
                new ObjectParameter("Secret", secret) :
                new ObjectParameter("Secret", typeof(byte[]));
    
            var validUntilParameter = validUntil.HasValue ?
                new ObjectParameter("ValidUntil", validUntil) :
                new ObjectParameter("ValidUntil", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetSecretForUser", userLoginNameParameter, secretParameter, validUntilParameter);
        }
    
        public virtual int DeleteSecretForUser(string userLoginName)
        {
            var userLoginNameParameter = userLoginName != null ?
                new ObjectParameter("UserLoginName", userLoginName) :
                new ObjectParameter("UserLoginName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSecretForUser", userLoginNameParameter);
        }
    }
}
